import { AuthProvider } from "@/client/provider/AuthProvider";
import TanstackProvider from "@/client/provider/TanstackProvider";
import Navigation from "@/web/components/customs/Navigation";
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { cookies } from "next/headers";
import React from "react";
import { Toaster } from "sonner";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

type JwtPayload = {
  sub: string;
  iat: number;
  exp: number;
};

export const parseToken = (token: string): JwtPayload => {
  try {
    const base64Payload = token.split(".")[1];
    const jsonPayload = atob(base64Payload);
    return JSON.parse(jsonPayload) as JwtPayload;
  } catch {
    throw new Error("Invalid JWT token");
  }
};

const getUserFromCookies = async () => {
  const cookieStore = await cookies();
  const token = cookieStore.get("token")?.value;

  if (!token) return { isLoggedIn: false, email: "" };

  try {
    const payload = parseToken(token);
    return { isLoggedIn: true, email: payload.sub };
  } catch {
    return { isLoggedIn: false, email: "" };
  }
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const auth = await getUserFromCookies();

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        suppressHydrationWarning
      >
        <AuthProvider value={auth}>
          <TanstackProvider>
            <Navigation /> {children}
            <Toaster richColors position="bottom-right" />
          </TanstackProvider>
        </AuthProvider>
      </body>
    </html>
  );
}
